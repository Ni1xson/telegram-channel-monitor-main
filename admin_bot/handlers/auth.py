# -*- coding: utf-8 -*-
import asyncio
import base64
import glob
import logging
import os
import sys
from pathlib import Path
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from telethon.errors import PhoneCodeInvalidError, SessionPasswordNeededError
from telethon import TelegramClient

from config.config import Config
from admin_bot.utils.states import AuthStates
from admin_bot.keyboards.keyboards import AdminKeyboards
from admin_bot.utils.menu import send_menu_message
from monitor.client import TelegramMonitorClient

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üë§ User –∫–ª–∏–µ–Ω—Ç")
async def open_user_client_menu(message: Message, monitor_client: TelegramMonitorClient, state: FSMContext):
    await state.clear()
    if message.from_user.id not in Config.ALLOWED_USERS:
        return
    authorized = await monitor_client.is_authorized()
    user_info = None
    if authorized and monitor_client.client:
        try:
            me = await monitor_client.client.get_me()
            if getattr(me, 'username', None):
                username = f"@{me.username}"
            elif getattr(me, 'first_name', None):
                username = me.first_name
            else:
                username = str(me.id)
            user_info = f"<b>–ü–æ–¥–∫–ª—é—á—ë–Ω –∫–∞–∫:</b> {username} (ID: {me.id})"
        except Exception:
            user_info = "<b>–ü–æ–¥–∫–ª—é—á—ë–Ω</b>"
    else:
        user_info = "<b>‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>"
    await send_menu_message(
        message,
        f"üë§ <b>User –∫–ª–∏–µ–Ω—Ç</b>\n\n{user_info}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=AdminKeyboards.user_client_menu(authorized),
    )


@router.message(Command("login"))
async def cmd_login(
    message: Message, state: FSMContext, monitor_client: TelegramMonitorClient
):
    """–°—Ç–∞—Ä—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await _cmd_login(message, message.from_user.id, state, monitor_client)


async def _cmd_login(
    message: Message,
    user_id: int,
    state: FSMContext,
    monitor_client: TelegramMonitorClient,
):
    """Start user authorization."""
    if user_id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if await monitor_client.is_authorized():
        await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        return

    await state.set_state(AuthStates.waiting_phone)
    await send_menu_message(
        message,
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):",
        reply_markup=AdminKeyboards.cancel(),
    )


@router.callback_query(F.data == "user_login")
async def cb_login(callback: CallbackQuery, state: FSMContext, monitor_client: TelegramMonitorClient):
    await _cmd_login(callback.message, callback.from_user.id, state, monitor_client)
    await callback.answer()


@router.message(AuthStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext, monitor_client: TelegramMonitorClient):
    phone = message.text.strip()
    try:
        await monitor_client.send_code(phone)
    except Exception as e:  # pragma: no cover - network/telethon errors
        logger.exception("Failed to send code", exc_info=e)
        await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await state.update_data(phone=phone)
    await state.set_state(AuthStates.waiting_code)
    await message.answer("‚úâÔ∏è –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")


@router.message(AuthStates.waiting_code)
async def process_code(message: Message, state: FSMContext, monitor_client: TelegramMonitorClient):
    data = await state.get_data()
    phone = data.get("phone")
    code = message.text.strip()
    try:
        await monitor_client.sign_in(phone, code)
    except SessionPasswordNeededError:
        await state.update_data(code=code)
        await state.set_state(AuthStates.waiting_password)
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        return
    except PhoneCodeInvalidError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel")
        return
    except Exception as e:  # pragma: no cover - unexpected
        logger.exception("Failed to sign in", exc_info=e)
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await state.clear()
    await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")


@router.message(AuthStates.waiting_password)
async def process_password(message: Message, state: FSMContext, monitor_client: TelegramMonitorClient):
    data = await state.get_data()
    phone = data.get("phone")
    code = data.get("code")
    password = message.text.strip()
    try:
        await monitor_client.sign_in(phone, code=None, password=password)
    except Exception as e:  # pragma: no cover - invalid password etc
        logger.exception("Failed to sign in with password", exc_info=e)
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å.")
        await state.clear()
        return

    await state.clear()
    await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")


@router.message(Command("logout"))
async def cmd_logout(
    message: Message, monitor_client: TelegramMonitorClient
):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    await _cmd_logout(message, message.from_user.id, monitor_client)


async def _cmd_logout(
    message: Message, user_id: int, monitor_client: TelegramMonitorClient
):
    """Log out from the user account."""
    if user_id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if not monitor_client.client:
        await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    try:
        await monitor_client.client.log_out()
        await monitor_client.client.disconnect()
        monitor_client.client = None
        await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    except Exception as e:  # pragma: no cover - unexpected
        logger.exception("Failed to logout", exc_info=e)
        await message.answer("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")


@router.callback_query(F.data == "user_logout")
async def cb_logout(callback: CallbackQuery, monitor_client: TelegramMonitorClient):
    await _cmd_logout(callback.message, callback.from_user.id, monitor_client)
    await callback.answer()


@router.callback_query(F.data == "user_sessions")
async def list_sessions(callback: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π."""
    if callback.from_user.id not in Config.ALLOWED_USERS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    sessions = glob.glob("*.session")
    if not sessions:
        text = "‚ÑπÔ∏è –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        lines = ["üóÇ <b>–°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:</b>", ""]
        for name in sessions:
            authorized = False
            try:
                tmp = TelegramClient(
                    name.replace(".session", ""),
                    Config.TELEGRAM_API_ID,
                    Config.TELEGRAM_API_HASH,
                )
                await tmp.connect()
                authorized = await tmp.is_user_authorized()
            except Exception as e:  # pragma: no cover - network issues
                logger.exception("Failed to check session", exc_info=e)
            finally:
                try:
                    await tmp.disconnect()
                except Exception:
                    pass

            mark = "‚úÖ" if authorized else "‚ùå"
            lines.append(f"{mark} <b>{name}</b>")

        text = "\n".join(lines)

    await callback.message.edit_text(
        text,
        reply_markup=AdminKeyboards.back_main(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "user_delete_session")
async def choose_session_to_delete(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if callback.from_user.id not in Config.ALLOWED_USERS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    sessions = glob.glob("*.session")
    if not sessions:
        await callback.message.edit_text(
            "‚ùå –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=AdminKeyboards.back_main(),
        )
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = []
    for s in sessions[:10]:
        encoded = base64.urlsafe_b64encode(s.encode()).decode()
        keyboard.append(
            [InlineKeyboardButton(text=s, callback_data=f"delete_session_{encoded}")]
        )

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")])

    await callback.message.edit_text(
        "‚ùå <b>–£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_session_"))
async def delete_session(callback: CallbackQuery, monitor_client: TelegramMonitorClient):
    """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏."""
    if callback.from_user.id not in Config.ALLOWED_USERS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    encoded = callback.data.replace("delete_session_", "")
    try:
        name = base64.urlsafe_b64decode(encoded.encode()).decode()
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    try:
        os.remove(name)
        journal = name + "-journal"
        if os.path.exists(journal):
            os.remove(journal)
    except FileNotFoundError:
        text = "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:  # pragma: no cover - filesystem errors
        logger.exception("Failed to delete session", exc_info=e)
        text = "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"
    else:
        text = f"‚úÖ –°–µ—Å—Å–∏—è {name} —É–¥–∞–ª–µ–Ω–∞"

    authorized = await monitor_client.is_authorized()
    await callback.message.edit_text(
        text,
        reply_markup=AdminKeyboards.user_client_menu(authorized),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data == "user_cli_login")
async def run_cli_login(callback: CallbackQuery, monitor_client: TelegramMonitorClient):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å CLI –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."""
    if callback.from_user.id not in Config.ALLOWED_USERS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        await callback.message.answer(
            "üíª –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª–∏. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ..."
        )
        proc = await asyncio.create_subprocess_exec(
            sys.executable,
            "-m",
            "scripts.cli_login",
            cwd=str(Path(__file__).resolve().parents[2]),
        )
        await proc.wait()
        authorized = await monitor_client.is_authorized()
        if proc.returncode == 0 and authorized:
            result = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        else:
            result = "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
        await callback.message.answer(result)
    except Exception:
        await callback.message.answer(
            "‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n"
            "<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
            "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>python3 scripts/cli_login.py</code>\n"
            "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –∫–æ–Ω—Å–æ–ª–∏.\n"
            "4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞."
        )
    await callback.answer()
