# -*- coding: utf-8 -*-
import os
import shutil
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from config.config import Config
from monitor.client import TelegramMonitorClient

router = Router()

@router.message(Command("ping"))
async def cmd_ping(message: Message, monitor_client: TelegramMonitorClient):
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    is_auth = await monitor_client.is_authorized()
    status = "‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞!" if is_auth else "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!"
    await message.answer(f"üèì {status}")

@router.message(Command("backup"))
async def cmd_backup(message: Message):
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    session_file = f"{Config.TELEGRAM_SESSION_NAME}.session"
    backup_file = f"{Config.TELEGRAM_SESSION_NAME}.session.bak"
    if not os.path.exists(session_file):
        await message.answer("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    try:
        shutil.copyfile(session_file, backup_file)
        await message.answer("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")