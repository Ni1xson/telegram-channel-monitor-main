# -*- coding: utf-8 -*-
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.db import Database
from monitor.client import TelegramMonitorClient
from database.models import Filter
from config.config import Config
from admin_bot.keyboards.keyboards import AdminKeyboards
from admin_bot.utils.states import FilterStates
from admin_bot.utils import send_menu_message
from aiogram.filters import Command
logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
async def filters_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    await state.clear()

    if message.from_user.id not in Config.ALLOWED_USERS:
        return

    await send_menu_message(
        message,
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=AdminKeyboards.filters_menu(),
    )


@router.callback_query(F.data == "filter_add")
async def start_add_filter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    await state.set_state(FilterStates.waiting_name)

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ù–æ–≤–æ—Å—Ç–∏', '–†–µ–∫–ª–∞–º–∞', '–°–∫–∏–¥–∫–∏'):",
        reply_markup=AdminKeyboards.cancel(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.message(FilterStates.waiting_name)
async def process_filter_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    if len(message.text) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(name=message.text)
    await state.set_state(FilterStates.waiting_keywords)

    await message.answer(
        "üî§ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>—Å–∫–∏–¥–∫–∞, –∞–∫—Ü–∏—è, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞</code>\n"
        "‚Ä¢ <code>–Ω–æ–≤–æ—Å—Ç–∏, –Ω–æ–≤–æ—Å—Ç—å</code>\n"
        "‚Ä¢ <code>Bitcoin, BTC, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</code>\n\n"
        "üí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, —Ç–∞–∫ –∏ —Ñ—Ä–∞–∑—ã.",
        reply_markup=AdminKeyboards.cancel(),
        parse_mode="HTML",
    )


@router.message(FilterStates.waiting_keywords)
async def process_filter_keywords(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = [kw.strip() for kw in message.text.split(",") if kw.strip()]

    if not keywords:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return

    if len(keywords) > 50:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º 50.")
        return

    await state.update_data(keywords=keywords)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –ª–æ–≥–∏–∫–∏
    await message.answer(
        "üß† <b>–¢–∏–ø –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä:\n\n"
        "‚Ä¢ <b>–°–æ–¥–µ—Ä–∂–∏—Ç</b> ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª—é–±–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ. "
        "–ü—Ä–∏–º–µ—Ä: <i>¬´–°–µ–≥–æ–¥–Ω—è —Å–∫–∏–¥–∫–∞!¬ª</i> –¥–ª—è <code>—Å–∫–∏–¥–∫–∞, –∞–∫—Ü–∏—è</code>.\n"
        "‚Ä¢ <b>–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</b> ‚Äì –∏—â–µ—Ç —Ç–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞, –±–µ–∑ —á–∞—Å—Ç–µ–π. "
        "–ü—Ä–∏–º–µ—Ä: <code>btc</code> –Ω–∞–π–¥—ë—Ç 'btc', –Ω–æ –Ω–µ 'bitcoin'.\n"
        "‚Ä¢ <b>–í—Å–µ —Å–ª–æ–≤–∞</b> ‚Äì –≤ —Ç–µ–∫—Å—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. "
        "–ü—Ä–∏–º–µ—Ä: <code>–∫—É–ø–∏—Ç—å, btc</code> ‚Üí ¬´–∫—É–ø–∏—Ç—å btc —Å–µ–π—á–∞—Å¬ª.\n"
        "‚Ä¢ <b>–§—Ä–∞–∑–∞</b> ‚Äì —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ–ª–Ω–∞—è —Ñ—Ä–∞–∑–∞ —Å –ø–æ—Ä—è–¥–∫–æ–º —Å–ª–æ–≤. "
        "–ü—Ä–∏–º–µ—Ä: <code>–∫—É–ø–∏—Ç—å btc</code>.\n"
        "‚Ä¢ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</b> ‚Äì –ø–æ–∏—Å–∫ –ø–æ regex. "
        "–ü—Ä–∏–º–µ—Ä: <code>\\d+% —Å–∫–∏–¥–∫–∞</code>.\n"
        "‚Ä¢ <b>–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç</b> ‚Äì –∏—Å–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. "
        "–ü—Ä–∏–º–µ—Ä: —Å–ª–æ–≤–æ <code>—Ä–µ–∫–ª–∞–º–∞</code> –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.",
        reply_markup=AdminKeyboards.filter_logic_types(),
        parse_mode="HTML",
    )


@router.callback_query(F.data.startswith("logic_"))
async def process_filter_logic(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ª–æ–≥–∏–∫–∏"""
    logic_type = callback.data.replace("logic_", "")
    await state.update_data(logic_type=logic_type)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ä–µ–≥–∏—Å—Ç—Ä
    await callback.message.edit_text(
        "üî§ <b>–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä?</b>\n\n"
        "–†–∞–∑–ª–∏—á–∞—Ç—å –ª–∏ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã?\n\n"
        "‚Ä¢ <b>–î–∞</b> - 'Bitcoin' –∏ 'bitcoin' –±—É–¥—É—Ç —Ä–∞–∑–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
        "‚Ä¢ <b>–ù–µ—Ç</b> - 'Bitcoin' –∏ 'bitcoin' –±—É–¥—É—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏",
        reply_markup=AdminKeyboards.boolean_choice(
            "–î–∞ (—É—á–∏—Ç—ã–≤–∞—Ç—å)",
            "–ù–µ—Ç (–Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å)",
            "case_sensitive_true",
            "case_sensitive_false",
        ),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("case_sensitive_"))
async def process_case_sensitive(
    callback: CallbackQuery,
    state: FSMContext,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    case_sensitive = callback.data == "case_sensitive_true"
    await state.update_data(case_sensitive=case_sensitive)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤)
    data = await state.get_data()
    logic_type = data.get("logic_type", "contains")

    if logic_type in ["all_words", "phrase"]:
        await callback.message.edit_text(
            "üìù <b>–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤–∞–∂–µ–Ω?</b>\n\n"
            "–î–æ–ª–∂–Ω—ã –ª–∏ —Å–ª–æ–≤–∞ –∏–¥—Ç–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ?\n\n"
            "‚Ä¢ <b>–î–∞</b> - '–∫—É–ø–∏—Ç—å bitcoin' ‚â† 'bitcoin –∫—É–ø–∏—Ç—å'\n"
            "‚Ä¢ <b>–ù–µ—Ç</b> - –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω",
            reply_markup=AdminKeyboards.boolean_choice(
                "–î–∞ (–≤–∞–∂–µ–Ω)", "–ù–µ—Ç (–Ω–µ –≤–∞–∂–µ–Ω)", "word_order_true", "word_order_false"
            ),
            parse_mode="HTML",
        )
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω
        await state.update_data(word_order_matters=False)
        await finalize_filter_creation(callback, state, db, monitor_client)

    await callback.answer()


@router.callback_query(F.data.startswith("word_order_"))
async def process_word_order(
    callback: CallbackQuery,
    state: FSMContext,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—Ä—è–¥–∫–∞ —Å–ª–æ–≤"""
    word_order_matters = callback.data == "word_order_true"
    await state.update_data(word_order_matters=word_order_matters)

    await finalize_filter_creation(callback, state, db, monitor_client)
    await callback.answer()


async def finalize_filter_creation(
    callback: CallbackQuery,
    state: FSMContext,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞
    user_id = callback.from_user.id
    filter_obj = Filter(
        user_id=user_id,
        name=data["name"],
        keywords=data["keywords"],
        logic_type=data["logic_type"],
        case_sensitive=data["case_sensitive"],
        word_order_matters=data["word_order_matters"],
        enabled=True,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    filter_id = await db.add_filter(filter_obj)

    if filter_id:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        logic_names = {
            "contains": "–°–æ–¥–µ—Ä–∂–∏—Ç",
            "exact": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
            "all_words": "–í—Å–µ —Å–ª–æ–≤–∞",
            "phrase": "–§—Ä–∞–∑–∞",
            "regex": "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
            "not_contains": "–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç",
        }

        summary_text = f"""
‚úÖ <b>–§–∏–ª—å—Ç—Ä —Å–æ–∑–¥–∞–Ω!</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['name']}
üî§ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {', '.join(data['keywords'])}
üß† <b>–¢–∏–ø –ª–æ–≥–∏–∫–∏:</b> {logic_names.get(data['logic_type'], data['logic_type'])}
üî§ <b>–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä:</b> {'–î–∞' if data['case_sensitive'] else '–ù–µ—Ç'}
üìù <b>–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤–∞–∂–µ–Ω:</b> {'–î–∞' if data['word_order_matters'] else '–ù–µ—Ç'}

üÜî <b>ID —Ñ–∏–ª—å—Ç—Ä–∞:</b> {filter_id}
        """

        await callback.message.edit_text(
            summary_text, reply_markup=AdminKeyboards.filters_menu(), parse_mode="HTML"
        )

        if monitor_client:
            await monitor_client.reload_filters(user_id)

    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=AdminKeyboards.filters_menu(),
            parse_mode="HTML",
        )

    await state.clear()


@router.callback_query(F.data == "filter_list")
async def show_filters_list(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    user_id = callback.from_user.id
    filters = await db.get_user_filters(user_id, enabled_only=False)

    if not filters:
        await callback.message.edit_text(
            "üìù <b>–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å—Ç—Ä, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'.",
            reply_markup=AdminKeyboards.filters_menu(),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text_lines = ["üìù <b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"]

    for i, filter_obj in enumerate(filters, 1):
        status = "‚úÖ" if filter_obj.enabled else "‚ùå"
        keywords_preview = ", ".join(filter_obj.keywords[:3])
        if len(filter_obj.keywords) > 3:
            keywords_preview += f" –∏ –µ—â–µ {len(filter_obj.keywords) - 3}"

        text_lines.append(
            f"{i}. {status} <b>{filter_obj.name}</b>\n"
            f"   üî§ {keywords_preview}\n"
            f"   üÜî ID: {filter_obj.id}\n"
        )

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    keyboard = []
    for filter_obj in filters[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"{'‚úÖ' if filter_obj.enabled else '‚ùå'} {filter_obj.name[:20]}",
                    callback_data=f"filter_show_{filter_obj.id}",
                )
            ]
        )

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")])

    await callback.message.edit_text(
        "\n".join(text_lines),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("filter_show_"))
async def show_filter_details(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_id = int(callback.data.replace("filter_show_", ""))

    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ –±–∞–∑—ã
    filters = await db.get_user_filters(user_id, enabled_only=False)
    filter_obj = next((f for f in filters if f.id == filter_id), None)

    if not filter_obj:
        await callback.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    logic_names = {
        "contains": "–°–æ–¥–µ—Ä–∂–∏—Ç",
        "exact": "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
        "all_words": "–í—Å–µ —Å–ª–æ–≤–∞",
        "phrase": "–§—Ä–∞–∑–∞",
        "regex": "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
        "not_contains": "–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç",
    }

    created = (
        filter_obj.created_at.strftime("%d.%m.%Y %H:%M")
        if filter_obj.created_at
        else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )
    details_text = f"""
üìù <b>–§–∏–ª—å—Ç—Ä: {filter_obj.name}</b>

üÜî <b>ID:</b> {filter_obj.id}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω' if filter_obj.enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üî§ <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>
{', '.join(filter_obj.keywords)}

üß† <b>–¢–∏–ø –ª–æ–≥–∏–∫–∏:</b> {logic_names.get(filter_obj.logic_type, filter_obj.logic_type)}
üî§ <b>–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä:</b> {'–î–∞' if filter_obj.case_sensitive else '–ù–µ—Ç'}
üìù <b>–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤–∞–∂–µ–Ω:</b> {'–î–∞' if filter_obj.word_order_matters else '–ù–µ—Ç'}

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {created}
    """

    await callback.message.edit_text(
        details_text,
        reply_markup=AdminKeyboards.filter_actions(filter_id),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("filter_toggle_"))
async def toggle_filter(
    callback: CallbackQuery,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"""
    filter_id = int(callback.data.replace("filter_toggle_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    user_id = callback.from_user.id
    filters = await db.get_user_filters(user_id, enabled_only=False)
    filter_obj = next((f for f in filters if f.id == filter_id), None)

    if not filter_obj:
        await callback.answer("‚ùå –§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = not filter_obj.enabled
    success = await db.update_filter(filter_id, enabled=new_status)

    if success:
        status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
        await callback.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä {status_text}", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_filter_details(callback, db)

        if monitor_client:
            await monitor_client.reload_filters(user_id)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞", show_alert=True)


@router.callback_query(F.data.startswith("filter_delete_"))
async def confirm_delete_filter(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_id = int(callback.data.replace("filter_delete_", ""))

    await callback.message.edit_text(
        "‚ùì <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=AdminKeyboards.confirmation("delete_filter", filter_id),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_filter_"))
async def delete_filter(
    callback: CallbackQuery,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞"""
    filter_id = int(callback.data.replace("confirm_delete_filter_", ""))

    user_id = callback.from_user.id
    success = await db.delete_filter(filter_id, user_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–§–∏–ª—å—Ç—Ä —É–¥–∞–ª–µ–Ω</b>\n\n" "–§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            reply_markup=AdminKeyboards.filters_menu(),
            parse_mode="HTML",
        )

        if monitor_client:
            await monitor_client.reload_filters(user_id)
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=AdminKeyboards.filters_menu(),
            parse_mode="HTML",
        )

    await callback.answer()


@router.callback_query(F.data == "filter_reload")
async def reload_filters(
    callback: CallbackQuery, monitor_client: TelegramMonitorClient
):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    if monitor_client:
        await monitor_client.reload_filters(callback.from_user.id)

    await callback.answer("üîÑ –§–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)


@router.callback_query(F.data == "filter_cancel")
async def cancel_filter_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º"""
    await state.clear()
    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=AdminKeyboards.filters_menu(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>

<b>üìù –§–∏–ª—å—Ç—Ä—ã –∏ üì¢ –ö–∞–Ω–∞–ª—ã:</b>
‚Ä¢ –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤!
‚Ä¢ –õ—é–±–æ–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –æ—á–∏—Å—Ç–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤.
‚Ä¢ <b>–ö–Ω–æ–ø–∫–∏:</b>
  ‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä/–∫–∞–Ω–∞–ª
  üìã –°–ø–∏—Å–æ–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã/–∫–∞–Ω–∞–ª—ã
  üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ‚Äî –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã/–∫–∞–Ω–∞–ª—ã
‚Ä¢ <b>–ö–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:</b> —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç @username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–∞—á–µ ID.

<b>‚öôÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>
‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä –∏ –∫–∞–Ω–∞–ª.
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤.

<b>üë§ User-–∫–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ–¥ –∫–∞–∫–∏–º Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ–¥–∫–ª—é—á—ë–Ω –±–æ—Ç.
‚Ä¢ –ò–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ ID, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ.

<b>üìä –°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Å—Ç–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
‚Ä¢ –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Å–º–æ—Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ.

<b>üîß –ö–æ–º–∞–Ω–¥—ã:</b>
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status ‚Äî —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>‚ùì FAQ:</b>
‚Ä¢ <b>–ü–æ—á–µ–º—É –Ω–µ –≤–∏–∂—É –∫–∞–Ω–∞–ª—ã/—Ñ–∏–ª—å—Ç—Ä—ã –¥—Ä—É–≥–∞?</b> ‚Äî –¢–µ–ø–µ—Ä—å –≤—Å—ë –æ–±—â–µ–µ, –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–Ω—ã –≤—Å–µ–º.
‚Ä¢ <b>–ü–æ—á–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è?</b> ‚Äî –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏ –∫–∞–Ω–∞–ª.
‚Ä¢ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b> ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """

    await send_menu_message(message, help_text, reply_markup=AdminKeyboards.back_main())
