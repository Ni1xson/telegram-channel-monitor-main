# -*- coding: utf-8 -*-
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config.config import Config
from admin_bot.keyboards.keyboards import AdminKeyboards
from admin_bot.utils import send_menu_message, send_monitoring_summary
from database.db import Database
from monitor.client import TelegramMonitorClient

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("cancel"))
@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await send_menu_message(
        message,
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=AdminKeyboards.main_menu(),
    )


@router.callback_query(F.data == "cancel")
async def cancel_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    try:
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=AdminKeyboards.main_menu(),
            parse_mode="HTML",
        )
    except Exception:
        await send_menu_message(
            callback.message,
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=AdminKeyboards.main_menu(),
        )
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    welcome_text = """
ü§ñ <b>–¢–µ–ª–µ–≥—Ä–∞–º –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –ê–¥–º–∏–Ω–∫–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤!

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.
    """

    await send_menu_message(
        message,
        welcome_text,
        reply_markup=AdminKeyboards.main_menu(),
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>

<b>üìù –§–∏–ª—å—Ç—Ä—ã:</b>
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç - –∏—â–µ—Ç –ª—é–±–æ–µ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
‚Ä¢ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –∏—â–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ
‚Ä¢ –í—Å–µ —Å–ª–æ–≤–∞ - –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
‚Ä¢ –§—Ä–∞–∑–∞ - –∏—â–µ—Ç —Ç–æ—á–Ω—É—é —Ñ—Ä–∞–∑—É
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç - –∏—Å–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

<b>üì¢ –ö–∞–Ω–∞–ª—ã:</b>
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞–Ω–∞–ª—ã –ø–æ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name)
  –∏–ª–∏ –ø–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å/–≤–∫–ª—é—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ {max_channels} –∫–∞–Ω–∞–ª–æ–≤

<b>üéØ –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã:</b>
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞
‚Ä¢ –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–∏ —á–∞—Ç—ã

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ/–æ—Ç–∫–ª—é—á–∏—Ç–µ –ø–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–Ω–∞–ª–æ–≤, —Å—Å—ã–ª–æ–∫
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π

<b>üîß –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–û—Ç–∫—Ä–æ–π—Ç–µ ¬´üë§ User –∫–ª–∏–µ–Ω—Ç¬ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –∏ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    """.format(
        max_channels=Config.MAX_MONITORED_CHANNELS
    )

    await send_menu_message(message, help_text, reply_markup=AdminKeyboards.back_main())


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_menu(message: Message, state: FSMContext):
    await cmd_help(message)


@router.message(Command("status"))
async def cmd_status(
    message: Message, db: Database, monitor_client: TelegramMonitorClient
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    user_id = message.from_user.id

    filters = await db.get_user_filters(user_id)
    channels = await db.get_user_channels(user_id)
    found_today = await db.get_today_found_messages_count(user_id)
    settings = await db.get_user_settings(user_id)

    authorized = await monitor_client.is_authorized()
    user_client_status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" if authorized else "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    monitoring_active = (
        monitor_client.running and channels and settings and settings.monitoring_enabled

    )

    await message.answer(
        status_text,
        parse_mode="HTML",
        reply_markup=AdminKeyboards.back_main(),
    )


@router.message(Command("health"))
async def cmd_health(message: Message, monitor_client: TelegramMonitorClient):
    """Check accessibility of monitored channels."""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        report = await monitor_client.check_health(message.from_user.id)
    except Exception as e:  # pragma: no cover - unexpected errors
        logger.exception("Health check failed", exc_info=e)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤")
        return

    if not report:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return

    lines = ["ü©∫ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤</b>", ""]
    for name, ok in report.items():
        mark = "‚úÖ" if ok else "‚ùå"
        lines.append(f"{mark} {name}")

    await message.answer("\n".join(lines), parse_mode="HTML")


@router.callback_query(F.data == "back_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    try:
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=AdminKeyboards.main_menu(),
            parse_mode="HTML",
        )
    except Exception:
        await send_menu_message(
            callback.message,
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=AdminKeyboards.main_menu(),
        )
    await callback.answer()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def open_settings(message: Message, state: FSMContext, db: Database):
    await state.clear()
    settings = await db.get_user_settings(message.from_user.id)
    await send_menu_message(
        message,
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=AdminKeyboards.settings_menu(settings),
    )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def open_stats(
    message: Message,
    state: FSMContext,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    await state.clear()

    status_text = await _compose_status_text(
        message.from_user.id, db=db, monitor_client=monitor_client
    )

    await send_menu_message(
        message,
        status_text,
        reply_markup=AdminKeyboards.back_main(),
    )


async def _compose_status_text(
    user_id: int,
    db: Database,
    monitor_client: TelegramMonitorClient,
) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""

    filters_count = await db.count_user_filters(user_id)
    channels_count = await db.count_user_channels(user_id)
    found_today = await db.count_messages_today(user_id)
    settings = await db.get_user_settings(user_id)

    authorized = await monitor_client.is_authorized()
    user_client_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if authorized else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    monitoring_enabled = monitor_client.is_monitoring_enabled(user_id)
    monitoring_active = monitor_client.running and channels_count and monitoring_enabled
    monitoring_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if monitoring_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"

    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        "ü§ñ –ê–¥–º–∏–Ω-–±–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        f"üë§ User-–∫–ª–∏–µ–Ω—Ç: {user_client_status}\n"
        "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞\n"
        f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitoring_status}\n"
        f"üì° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if monitoring_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filters_count}\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels_count}\n"
        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {found_today}"
    )

    return status_text


async def _render_settings(callback: CallbackQuery, db: Database):
    settings = await db.get_user_settings(callback.from_user.id)
    try:
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=AdminKeyboards.settings_menu(settings),
            parse_mode="HTML",
        )
    except Exception:
        try:
            await callback.message.edit_reply_markup(
                reply_markup=AdminKeyboards.settings_menu(settings)
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e).lower():
                return
            logger.exception("Failed to render settings", exc_info=e)
            await send_menu_message(
                callback.message,
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=AdminKeyboards.settings_menu(settings),
            )
        except Exception as e:
            logger.exception("Failed to render settings", exc_info=e)
            await send_menu_message(
                callback.message,
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=AdminKeyboards.settings_menu(settings),
            )


@router.callback_query(F.data == "settings_time")
async def toggle_setting_time(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    await db.update_user_settings(
        user_id, include_timestamp=not settings.include_timestamp
    )
    await _render_settings(callback, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@router.callback_query(F.data == "settings_channel")
async def toggle_setting_channel(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    await db.update_user_settings(
        user_id, include_channel_info=not settings.include_channel_info
    )
    await _render_settings(callback, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@router.callback_query(F.data == "settings_link")
async def toggle_setting_link(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    await db.update_user_settings(
        user_id, include_message_link=not settings.include_message_link
    )
    await _render_settings(callback, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@router.callback_query(F.data == "settings_sender")
async def toggle_setting_sender(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    await db.update_user_settings(
        user_id, include_sender_id=not settings.include_sender_id
    )
    await _render_settings(callback, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@router.callback_query(F.data == "settings_format")
async def change_notification_format(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    formats = ["full", "compact", "minimal"]
    current = settings.notification_format if settings else "full"
    try:
        idx = formats.index(current)
    except ValueError:
        idx = 0
    next_format = formats[(idx + 1) % len(formats)]
    await db.update_user_settings(user_id, notification_format=next_format)
    await _render_settings(callback, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@router.callback_query(F.data == "settings_formatting")
async def change_formatting_mode(callback: CallbackQuery, db: Database):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    if settings.forward_as_code:
        await db.update_user_settings(
            user_id,
            forward_as_code=False,
            include_original_formatting=True,
        )
    elif settings.include_original_formatting:
        await db.update_user_settings(
            user_id,
            include_original_formatting=False,
        )
    else:
        await db.update_user_settings(user_id, forward_as_code=True)
    await _render_settings(callback, db)
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")


@router.callback_query(F.data == "settings_monitoring")
async def toggle_monitoring(
    callback: CallbackQuery, db: Database, monitor_client: TelegramMonitorClient
):
    user_id = callback.from_user.id
    settings = await db.get_user_settings(user_id)
    new_value = not settings.monitoring_enabled
    await db.set_monitoring_enabled(user_id, new_value)
    if monitor_client:
        await monitor_client.set_monitoring_enabled(user_id, new_value)

    status_msg = (
        "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω" if new_value else "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω"
    )
    logger.info(
        "User %s monitoring %s",
        user_id,
        "enabled" if new_value else "disabled",
    )

    await _render_settings(callback, db)
    await callback.answer(status_msg)

    if new_value:
        await send_monitoring_summary(callback.bot, db, user_id)


@router.message(Command("monitoring"))
async def toggle_monitoring_cmd(
    message: Message, db: Database, monitor_client: TelegramMonitorClient
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É."""
    if message.from_user.id not in Config.ALLOWED_USERS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    user_id = message.from_user.id
    settings = await db.get_user_settings(user_id)
    new_value = not settings.monitoring_enabled
    await db.set_monitoring_enabled(user_id, new_value)
    if monitor_client:
        await monitor_client.set_monitoring_enabled(user_id, new_value)

    if new_value:
        await send_monitoring_summary(message.bot, db, user_id)
    else:
        await message.answer("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω")
