# -*- coding: utf-8 -*-
import logging
import re
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext

from database.db import Database
from database.models import Channel, TargetChat
from monitor.client import TelegramMonitorClient
from config.config import Config
from admin_bot.keyboards.keyboards import AdminKeyboards
from admin_bot.utils.states import ChannelStates, TargetChatStates
from admin_bot.utils import send_menu_message

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
async def channels_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    await state.clear()

    if message.from_user.id not in Config.ALLOWED_USERS:
        return

    await send_menu_message(
        message,
        "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=AdminKeyboards.channels_menu(),
    )


@router.callback_query(F.data == "channel_add")
async def start_add_channel(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await state.set_state(ChannelStates.waiting_channel)

    await callback.message.edit_text(
        "üì¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (—Å @ –∏–ª–∏ –±–µ–∑):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>@news_channel</code>\n"
        "‚Ä¢ <code>news_channel</code>\n"
        "‚Ä¢ <code>https://t.me/news_channel</code>\n\n"
        "‚ÑπÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!",
        reply_markup=AdminKeyboards.cancel(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.message(ChannelStates.waiting_channel)
async def process_add_channel(
    message: Message,
    state: FSMContext,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    channel_input = message.text.strip()

    # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
    # Support t.me/c/<id> links for private channels
    tme_c_match = re.search(r"(?:https?://)?t\.me/c/(\d+)", channel_input)
    if tme_c_match:
        channel_username = tme_c_match.group(1)
    elif channel_input.startswith("https://t.me/"):
        channel_username = channel_input.replace("https://t.me/", "")
    elif channel_input.startswith("@"):
        channel_username = channel_input[1:]
    else:
        channel_username = channel_input

    if not channel_username:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    channel_info = None
    if monitor_client:
        channel_info = await monitor_client.resolve_channel(channel_username)

    if channel_info:
        user_id = message.from_user.id
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
        channel_obj = Channel(
            user_id=user_id,
            channel_id=channel_info["id"],
            channel_username=channel_info["username"],
            channel_title=channel_info["title"],
            enabled=True,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        success = await db.add_channel(channel_obj)

        if success:
            await message.answer(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üì¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_info['title']}\n"
                f"üÜî <b>ID:</b> {channel_info['id']}\n"
                f"üë§ <b>Username:</b> @{channel_info['username']}\n\n"
                f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
                reply_markup=AdminKeyboards.channels_menu(),
                parse_mode="HTML",
            )

            if monitor_client:
                await monitor_client.add_channel_to_monitor(user_id, channel_info["id"])

            # Send monitoring summary
            from admin_bot.utils import send_monitoring_summary
            await send_monitoring_summary(message.bot, db, user_id)

        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
                "–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                reply_markup=AdminKeyboards.channels_menu(),
                parse_mode="HTML",
            )
    else:
        await message.answer(
            "‚ùå <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username\n"
            "‚Ä¢ –ß—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –ß—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –≤—ã –≤ –Ω–µ–º —Å–æ—Å—Ç–æ–∏—Ç–µ",
            reply_markup=AdminKeyboards.channels_menu(),
            parse_mode="HTML",
        )

    await state.clear()


@router.callback_query(F.data == "channel_list")
async def show_channels_list(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    user_id = callback.from_user.id
    channels = await db.get_user_channels(user_id, enabled_only=False)

    if not channels:
        await callback.message.edit_text(
            "üì¢ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'.",
            reply_markup=AdminKeyboards.channels_menu(),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text_lines = ["üì¢ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"]

    for i, channel in enumerate(channels, 1):
        status = "‚úÖ" if channel.enabled else "‚ùå"
        text_lines.append(
            f"{i}. {status} <b>{channel.channel_title}</b>\n"
            f"   üë§ @{channel.channel_username}\n"
            f"   üÜî ID: {channel.channel_id}\n"
        )

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for channel in channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        status = "‚úÖ" if channel.enabled else "‚ùå"
        title = channel.channel_title[:25]
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"{status} {title}",
                    callback_data=f"channel_show_{channel.id}",
                )
            ]
        )

    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")])

    await callback.message.edit_text(
        "\n".join(text_lines),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("target_confirm_"))
async def confirm_target_chat(callback: CallbackQuery, db: Database):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
    try:
        _, _, user_id_str, chat_id_str = callback.data.split("_", 3)
        user_id = int(user_id_str)
        chat_id = int(chat_id_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    chat = callback.message.chat
    chat_title = chat.title or getattr(chat, "username", "") or "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"

    success = await db.add_target_chat(
        TargetChat(
            user_id=user_id,
            chat_id=chat_id,
            chat_title=chat_title,
            enabled=True,
        )
    )

    if success:
        await callback.message.edit_text("‚úÖ –ß–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        try:
            text = (
                f"‚úÖ –ß–∞—Ç '{chat_title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–ª–µ–≤–æ–≥–æ"
            )
            if len(text) > 4096:
                text = text[:4096]
            await callback.bot.send_message(
                user_id,
                text,
                reply_markup=AdminKeyboards.target_chats_menu(),
            )
            from admin_bot.utils import send_monitoring_summary
            await send_monitoring_summary(callback.bot, db, user_id)
        except Exception:
            pass
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç")
    await callback.answer()


@router.callback_query(F.data.startswith("target_delete_"))
async def delete_target_chat_cb(
    callback: CallbackQuery,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    chat_id = int(callback.data.replace("target_delete_", ""))
    user_id = callback.from_user.id
    success = await db.delete_target_chat(chat_id, user_id)
    if success:
        if monitor_client:
            pass  # nothing to do for now
        await callback.message.edit_text(
            "‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω", reply_markup=AdminKeyboards.target_chats_menu()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=AdminKeyboards.target_chats_menu()
        )
    await callback.answer()


@router.callback_query(F.data.startswith("channel_show_"))
async def show_channel_details(callback: CallbackQuery, db: Database):
    channel_id = int(callback.data.replace("channel_show_", ""))
    user_id = callback.from_user.id
    channels = await db.get_user_channels(user_id, enabled_only=False)
    channel = next((c for c in channels if c.id == channel_id), None)
    if not channel:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    text = (
        f"üì¢ <b>{channel.channel_title}</b>\n"
        f"üÜî <code>{channel.channel_id}</code>\n"
        f"üë§ @{channel.channel_username}\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if channel.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}"
    )
    await callback.message.edit_text(
        text,
        reply_markup=AdminKeyboards.channel_actions(channel.id),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("channel_toggle_"))
async def toggle_channel(
    callback: CallbackQuery,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    channel_id = int(callback.data.replace("channel_toggle_", ""))
    user_id = callback.from_user.id
    channels = await db.get_user_channels(user_id, enabled_only=False)
    channel = next((c for c in channels if c.id == channel_id), None)
    if not channel:
        await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    new_status = not channel.enabled
    success = await db.update_channel(channel_id, enabled=new_status)
    if success:
        if monitor_client:
            if new_status:
                await monitor_client.add_channel_to_monitor(user_id, channel.channel_id)
            else:
                await monitor_client.remove_channel_from_monitor(
                    user_id, channel.channel_id
                )

        if new_status:
            from admin_bot.utils import send_monitoring_summary
            await send_monitoring_summary(callback.bot, db, user_id)

        await show_channel_details(callback, db)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("channel_delete_"))
async def confirm_delete_channel(callback: CallbackQuery):
    channel_id = int(callback.data.replace("channel_delete_", ""))
    await callback.message.edit_text(
        "‚ùì <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        reply_markup=AdminKeyboards.confirmation("delete_channel", channel_id),
        parse_mode="HTML",
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_channel_"))
async def delete_channel(
    callback: CallbackQuery,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    channel_id = int(callback.data.replace("confirm_delete_channel_", ""))
    user_id = callback.from_user.id
    channels = await db.get_user_channels(user_id, enabled_only=False)
    channel = next((c for c in channels if c.id == channel_id), None)
    success = await db.delete_channel(channel_id, user_id)
    if success:
        if monitor_client and channel:
            await monitor_client.remove_channel_from_monitor(
                user_id, channel.channel_id
            )
        await callback.message.edit_text(
            "‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω",
            reply_markup=AdminKeyboards.channels_menu(),
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=AdminKeyboards.channels_menu(),
        )
    await callback.answer()


# –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
@router.message(F.text == "üéØ –¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã")
async def target_chats_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏"""
    await state.clear()

    if message.from_user.id not in Config.ALLOWED_USERS:
        return
    text = (
        "üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏</b>\n\n"
        "–¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã - —ç—Ç–æ —á–∞—Ç—ã, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await send_menu_message(
        message,
        text,
        reply_markup=AdminKeyboards.target_chats_menu(),
    )


@router.callback_query(F.data == "target_add")
async def start_add_target_chat(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
    await state.set_state(TargetChatStates.waiting_chat_id)

    await callback.message.edit_text(
        "üéØ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞:\n\n"
        "‚ÑπÔ∏è <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID —á–∞—Ç–∞:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ @userinfobot –≤ —á–∞—Ç\n"
        "2. –û–Ω –ø–æ–∫–∞–∂–µ—Ç ID —á–∞—Ç–∞\n"
        "3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ "
        "–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π!",
        reply_markup=AdminKeyboards.cancel(),
        parse_mode="HTML",
    )
    await callback.answer()


@router.message(TargetChatStates.waiting_chat_id)
async def process_add_target_chat(
    message: Message,
    state: FSMContext,
    db: Database,
    monitor_client: TelegramMonitorClient,
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞"""
    chat_id = None
    chat_title = ""

    bot = message.bot

    if message.forward_from_chat:
        chat_id = message.forward_from_chat.id
    elif message.text and (
        message.text.lstrip("-").isdigit() or message.text.startswith("@")
    ):
        try:
            if message.text.lstrip("-").isdigit():
                chat_id = int(message.text)
            else:
                chat_id = message.text
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return
    else:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return

    try:
        chat = await bot.get_chat(chat_id)
        chat_id = chat.id
        chat_title = chat.title or getattr(chat, "username", "") or "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"
    except Exception:
        await message.answer(
            "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç."
        )
        return

    try:
        await bot.send_message(
            chat_id,
            (
                "‚ÑπÔ∏è –≠—Ç–æ—Ç —á–∞—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å."
            ),
            reply_markup=AdminKeyboards.confirm_chat(message.from_user.id, chat_id),
        )
    except Exception:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞."
        )
        return

    await message.answer(
        f"üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ <b>{chat_title}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. "
        "–ù–∞–∂–º–∏—Ç–µ ‚Äò–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–∞—Ç‚Äô –≤ —Å–∞–º–æ–º —á–∞—Ç–µ.",
        reply_markup=AdminKeyboards.target_chats_menu(),
        parse_mode="HTML",
    )

    await state.clear()


@router.callback_query(F.data == "target_list")
async def show_target_chats_list(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤"""
    user_id = callback.from_user.id
    chats = await db.get_user_target_chats(user_id)

    if not chats:
        await callback.message.edit_text(
            "üéØ <b>–°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–∞—Ç, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç'.",
            reply_markup=AdminKeyboards.target_chats_menu(),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text_lines = ["üéØ <b>–¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã:</b>\n"]

    for i, chat in enumerate(chats, 1):
        status = "‚úÖ" if chat.enabled else "‚ùå"
        text_lines.append(
            f"{i}. {status} <b>{chat.chat_title}</b>\n" f"   üÜî ID: {chat.chat_id}\n"
        )

    text_lines.append("\nüí° –°—é–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    keyboard = []
    for chat in chats:
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=chat.chat_title[:25], callback_data=f"target_delete_{chat.id}"
                )
            ]
        )
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")])

    await callback.message.edit_text(
        "\n".join(text_lines),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
    )
    await callback.answer()
