#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Channel Monitor - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç User API (Telethon) –∏ Bot API (Aiogram) –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–∞—Ö
"""

import asyncio
import logging
import logging.config
import signal
import sys
import os
from typing import Optional

from config.config import Config, LOGGING_CONFIG
from database.db import Database
from monitor.client import TelegramMonitorClient
from admin_bot.bot import AdminBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger(__name__)


class TelegramMonitorApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.db: Optional[Database] = None
        self.monitor_client: Optional[TelegramMonitorClient] = None
        self.admin_bot: Optional[AdminBot] = None
        self.running = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Monitor...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            Config.validate()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db = Database(Config.DATABASE_PATH)
            await self.db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.db.add_allowed_user(Config.ADMIN_USER_ID)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            Config.ALLOWED_USERS = await self.db.get_allowed_users()

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for uid in Config.ALLOWED_USERS:
                await self.db.create_user_settings(uid)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitor_client = TelegramMonitorClient(self.db)
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç–∞
            self.admin_bot = AdminBot(self.db, self.monitor_client)
            logger.info("‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç —Å–æ–∑–¥–∞–Ω")

            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            self.running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info("üîç –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitor_task = asyncio.create_task(self.monitor_client.start())

            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await asyncio.sleep(2)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–±–æ—Ç–∞
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞...")
            admin_task = asyncio.create_task(self.admin_bot.start())

            # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await asyncio.sleep(0)
            self.monitor_client.bot = self.admin_bot.bot

            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")
            logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
            logger.info(f"üë§ –ê–¥–º–∏–Ω ID: {Config.ADMIN_USER_ID}")
            bot_username = f"{Config.BOT_TOKEN.split(':')[0]}bot"
            logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ @{bot_username} –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.gather(monitor_task, admin_task, return_exceptions=True)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            await self.stop()
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if self.running:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
            self.running = False
        else:
            logger.info("üõë –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if self.monitor_client:
            await self.monitor_client.stop()
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        if self.admin_bot:
            await self.admin_bot.stop()
            logger.info("‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        logger.info("üëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""

        def signal_handler(signum, frame):
            logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            loop = asyncio.get_event_loop()
            loop.create_task(self.stop())

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)


async def health_check():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏"""
    while True:
        try:
            await asyncio.sleep(86400)  # 24 —á–∞—Å–∞
            logger.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            if bot and hasattr(bot, 'send_message'):
                await bot.send_message(
                    Config.ADMIN_USER_ID, 
                    "‚ù§Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = TelegramMonitorApp()
    restart_count = 0
    max_restarts = 5

    while restart_count < max_restarts:
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            app.setup_signal_handlers()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            await app.initialize()

            # –ó–∞–ø—É—Å–∫–∞–µ–º health_check –≤–Ω—É—Ç—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            asyncio.create_task(health_check())

            # –ó–∞–ø—É—Å–∫–∞–µ–º
            await app.start()

        except KeyboardInterrupt:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram Monitor Bot...")
            break
        except Exception as e:
            restart_count += 1
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}/{max_restarts}): {e}")
            
            if restart_count >= max_restarts:
                logger.critical("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                sys.exit(1)
            
            logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(30)
        finally:
            await app.stop()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/bot.log'),
            logging.StreamHandler()
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    
    logger = logging.getLogger(__name__)
    logger.info("–ó–∞–ø—É—Å–∫ Telegram Monitor Bot...")

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
